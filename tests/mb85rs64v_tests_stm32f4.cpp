/********************************************************************************
 *  File Name:
 *    mb85rs64v_tests_stm32f4.cpp
 *
 *  Description:
 *    On device embedded tests for the MB85RS64V FRAM chip. Targeted for the STM32F4
 *    Nucleo development board.
 *
 *  2019 | Brandon Braun | brandonbraun653@gmail.com
 ********************************************************************************/

/* C++ Includes */
#include <algorithm>
#include <array>
#include <cstdint>
#include <memory>

/* Boost Includes */
#include <boost/circular_buffer.hpp>

/* Test Driver Includes */
#include "TinyEmbeddedTest.h"

/* Chimera Includes */
#include "chimeraPort.hpp"
#include <Chimera/gpio.hpp>
#include <Chimera/spi.hpp>

/* Module Under Test */
#include "mb85rs64v.hpp"

static Chimera::SPI::SPIClass_sPtr spi;
static FRAM::Fujitsu::MB85RS64V fram;
static Chimera::SPI::Setup setup;

/* Random data generated from Random.org */
static constexpr size_t dataSize                  = 1500;
static const std::array<uint8_t, dataSize> randomData = {
  0xae, 0xfc, 0x7e, 0x0f, 0xa1, 0x0c, 0x27, 0xeb, 0x80, 0x84, 0x1e, 0xa5, 0xbb, 0x16, 0x19, 0xaf, 0xd3, 0x85, 0x00, 0x95, 0x27,
  0xa8, 0x9c, 0x9a, 0x05, 0x05, 0x42, 0xeb, 0xdd, 0x4d, 0x63, 0x55, 0xb6, 0xf5, 0x14, 0x37, 0x59, 0xa9, 0x92, 0x6a, 0xda, 0x63,
  0xbe, 0x5b, 0xe2, 0xfb, 0x18, 0xc1, 0xc3, 0xf2, 0xc9, 0xf7, 0x71, 0xb3, 0xd5, 0x0c, 0x65, 0xe0, 0xc0, 0x26, 0xeb, 0x51, 0xfb,
  0xa3, 0xa3, 0x54, 0xd8, 0x1d, 0xcd, 0x44, 0xff, 0xca, 0x96, 0x62, 0xc3, 0xda, 0x0d, 0x95, 0xf3, 0xc0, 0x9d, 0x47, 0x17, 0x49,
  0x97, 0x9a, 0x41, 0x24, 0x7d, 0x62, 0x5a, 0xaa, 0xd7, 0x52, 0x68, 0xf7, 0xed, 0x99, 0x70, 0xaa, 0xf2, 0x7f, 0x37, 0x0f, 0xcf,
  0x05, 0x8c, 0xcd, 0x15, 0x87, 0x8d, 0xa6, 0x23, 0xe5, 0x6d, 0xad, 0x7f, 0x33, 0x42, 0x7b, 0x66, 0x73, 0xc4, 0x19, 0xa9, 0x30,
  0x60, 0x4e, 0x1b, 0x25, 0x6d, 0x9a, 0xd1, 0x38, 0x72, 0x8c, 0x4f, 0x25, 0x7a, 0x74, 0xdb, 0xfb, 0xe6, 0x7d, 0x2f, 0xe5, 0xa9,
  0xb3, 0xa5, 0xae, 0x54, 0x1c, 0x7a, 0x4d, 0xa4, 0x81, 0x05, 0xc4, 0x6e, 0x02, 0x74, 0xb2, 0x6f, 0x58, 0x08, 0x7a, 0x73, 0xb7,
  0xec, 0xda, 0xde, 0x87, 0xb2, 0xf3, 0x1c, 0xc9, 0xa4, 0x16, 0x39, 0x0d, 0x17, 0x2d, 0x04, 0xfa, 0xfb, 0xab, 0x39, 0xcf, 0x99,
  0x52, 0x94, 0x78, 0x2f, 0xd9, 0x3b, 0x27, 0xe3, 0x24, 0x8b, 0x0a, 0xb5, 0x38, 0x74, 0x20, 0xe0, 0x52, 0x28, 0x51, 0x1e, 0xa3,
  0x30, 0x4f, 0x68, 0xf4, 0x7e, 0x23, 0x16, 0x05, 0x12, 0x3d, 0xb2, 0x7b, 0x3a, 0x16, 0x5a, 0x0f, 0xba, 0x12, 0xc4, 0x9b, 0xb7,
  0x5f, 0xc5, 0x24, 0x96, 0x98, 0x30, 0x53, 0xaf, 0x6a, 0xee, 0xe6, 0xfd, 0xf6, 0x42, 0x88, 0xdc, 0xe8, 0xde, 0x04, 0x9a, 0xc4,
  0xb0, 0xf0, 0xa2, 0x76, 0xea, 0xcc, 0x13, 0x30, 0x98, 0x00, 0x3f, 0xb2, 0xe1, 0xd6, 0x7e, 0xc6, 0xbd, 0x86, 0x8f, 0x96, 0xbb,
  0xec, 0x47, 0x3a, 0xbb, 0x23, 0xe5, 0xbe, 0xa8, 0x9a, 0xd7, 0x8a, 0xec, 0x2e, 0xff, 0x67, 0x34, 0x6b, 0x9a, 0x40, 0x9d, 0xf4,
  0x79, 0x69, 0x71, 0xf3, 0x81, 0x3b, 0x52, 0x8c, 0x4d, 0x62, 0xfd, 0x71, 0xf6, 0x5a, 0xbb, 0x6a, 0x2c, 0x1a, 0xf2, 0x65, 0xf0,
  0x95, 0x98, 0xd7, 0x0a, 0x28, 0x51, 0x27, 0x1b, 0x01, 0x6e, 0x08, 0x64, 0x64, 0xae, 0xda, 0xea, 0xb7, 0x4e, 0x96, 0xd7, 0x34,
  0x4a, 0x5e, 0x1f, 0x2a, 0xec, 0x5a, 0x01, 0xa9, 0xc2, 0xc5, 0xdf, 0xfa, 0x03, 0x3f, 0x88, 0x1c, 0xdf, 0x74, 0x93, 0x35, 0xc2,
  0x68, 0xcb, 0x8d, 0xec, 0x86, 0x23, 0xd3, 0xfa, 0x5b, 0x5c, 0x28, 0x61, 0xc3, 0x74, 0x47, 0xa3, 0x0a, 0xc8, 0x80, 0x39, 0xf3,
  0xcc, 0xa0, 0xcd, 0xf3, 0x32, 0x8d, 0x9f, 0xe5, 0x42, 0x92, 0xe5, 0x71, 0x5c, 0x4a, 0xe4, 0xff, 0x15, 0xe2, 0xe6, 0xac, 0x94,
  0x17, 0xfe, 0x8b, 0x87, 0x2e, 0x0d, 0xd5, 0xce, 0xf5, 0xc3, 0x03, 0x92, 0x94, 0x6a, 0x74, 0x5c, 0xd4, 0xde, 0xbe, 0xf8, 0xe4,
  0x66, 0x7a, 0x00, 0x1f, 0x4d, 0xd9, 0x04, 0x0b, 0xd7, 0x60, 0xa2, 0x55, 0xe3, 0x1a, 0xd4, 0x0c, 0xd5, 0xda, 0x07, 0xc5, 0xd7,
  0x76, 0xdd, 0x99, 0x02, 0x63, 0x0b, 0x7d, 0x40, 0xd5, 0x40, 0x48, 0xd7, 0xc4, 0xad, 0x60, 0x49, 0xc0, 0xb4, 0x85, 0xbc, 0xef,
  0x0e, 0x4a, 0xa5, 0x8e, 0x72, 0xe6, 0xf5, 0x2b, 0x5f, 0x20, 0x69, 0x93, 0x15, 0x32, 0xb0, 0xc4, 0x46, 0xf2, 0x73, 0xb3, 0xaf,
  0xcd, 0x1b, 0x36, 0xc4, 0x22, 0x4d, 0xae, 0xda, 0xbf, 0x35, 0xdb, 0x69, 0x53, 0xd4, 0xad, 0x62, 0x18, 0xa9, 0xf8, 0x0f, 0x81,
  0xc4, 0xb0, 0xa4, 0x97, 0x03, 0x1d, 0xf1, 0xf3, 0xa2, 0x99, 0x73, 0xc7, 0x4b, 0xd4, 0xd0, 0x5c, 0x3e, 0x5c, 0xec, 0xec, 0xfb,
  0xd7, 0x2c, 0x46, 0xbd, 0xad, 0x74, 0xd2, 0xcb, 0x33, 0xbc, 0xa0, 0x07, 0x0a, 0xf9, 0x87, 0xb8, 0xc0, 0xe4, 0xef, 0x04, 0x79,
  0xfd, 0xc3, 0xdb, 0x5c, 0x89, 0xc9, 0xec, 0xb2, 0x91, 0x7b, 0xaa, 0x5e, 0x11, 0x2e, 0x66, 0x07, 0x2c, 0x3e, 0x94, 0x4d, 0xfe,
  0x0a, 0x40, 0xf7, 0x83, 0x63, 0x77, 0x3f, 0x4b, 0x65, 0x6f, 0x3a, 0xd0, 0x46, 0xde, 0x8f, 0x42, 0x19, 0x54, 0x88, 0x6d, 0xc1,
  0xa6, 0x9e, 0x88, 0x5c, 0xce, 0x93, 0xeb, 0xbe, 0x79, 0x9e, 0x13, 0x0d, 0xce, 0xae, 0x73, 0xc6, 0xa7, 0x57, 0x74, 0xf5, 0xae,
  0xba, 0x67, 0x96, 0x36, 0x93, 0xb1, 0x56, 0x24, 0xbc, 0x6a, 0x45, 0x38, 0x95, 0xff, 0xff, 0x70, 0x59, 0x4c, 0x5c, 0xf2, 0xeb,
  0x94, 0xa0, 0x1d, 0x65, 0xaa, 0x0d, 0x7e, 0xe1, 0xda, 0x1e, 0xc0, 0xe7, 0xea, 0x6c, 0xfd, 0x28, 0x95, 0xd3, 0xb6, 0x21, 0xad,
  0xc2, 0x59, 0xc1, 0x05, 0x3a, 0xda, 0xea, 0xec, 0x08, 0x33, 0x13, 0x5b, 0xd2, 0x4d, 0x82, 0x9a, 0x51, 0x08, 0xa4, 0x4e, 0x6b,
  0xc2, 0xdb, 0x98, 0x91, 0x41, 0xef, 0xe8, 0x58, 0xe1, 0xb7, 0x34, 0x2a, 0x28, 0xd4, 0x78, 0xdf, 0xfa, 0x94, 0x5e, 0x3e, 0x9d,
  0x6c, 0x06, 0x7d, 0x73, 0xa9, 0x1c, 0xf4, 0x71, 0xcf, 0x9e, 0xf5, 0xfc, 0x2d, 0x15, 0xd4, 0x7a, 0x22, 0x12, 0x4a, 0xe3, 0xe0,
  0xe3, 0xe7, 0xac, 0x92, 0x1b, 0x15, 0x09, 0xe1, 0xda, 0xa2, 0x49, 0xc4, 0x04, 0x2d, 0x32, 0xb8, 0x3e, 0xbd, 0x46, 0x75, 0xc1,
  0x56, 0x5b, 0xbb, 0x05, 0x46, 0xb4, 0x7e, 0xab, 0x4b, 0x60, 0x18, 0x38, 0x68, 0xa3, 0x7c, 0x2a, 0x8a, 0x24, 0xdc, 0x31, 0x4a,
  0x3b, 0xae, 0x61, 0x8b, 0x3d, 0x51, 0x8d, 0xc6, 0xc0, 0x13, 0x4a, 0xc0, 0xe0, 0x70, 0x3a, 0x13, 0xb3, 0xb9, 0x36, 0xca, 0x34,
  0x72, 0x91, 0x85, 0xc2, 0xa4, 0x96, 0x74, 0x54, 0x15, 0x9c, 0xe3, 0x28, 0x07, 0x5b, 0x91, 0xdb, 0x34, 0x91, 0x91, 0x7b, 0x8d,
  0x1d, 0xd3, 0x24, 0xa9, 0x7f, 0x2e, 0x46, 0x0c, 0xf3, 0x3e, 0xc6, 0xe4, 0x17, 0x3f, 0xb9, 0xde, 0xe1, 0x1a, 0x81, 0x2b, 0xb0,
  0xdf, 0x54, 0x71, 0xd9, 0x35, 0x27, 0xd2, 0x17, 0x17, 0x88, 0x9c, 0x6a, 0xdc, 0x29, 0x68, 0x2a, 0x93, 0xdc, 0x04, 0x3d, 0xf2,
  0x0c, 0xe6, 0xb0, 0x1c, 0x25, 0x9c, 0xdb, 0x02, 0xfa, 0x88, 0xd1, 0xf8, 0x0a, 0xa4, 0xdf, 0x71, 0x0d, 0xf4, 0x1c, 0x3b, 0xa5,
  0xcd, 0x92, 0x74, 0x66, 0xb5, 0xbe, 0xe2, 0xa5, 0x57, 0x4f, 0x11, 0x60, 0xd5, 0xef, 0xe1, 0x32, 0x41, 0x6b, 0x48, 0xf6, 0xfd,
  0x10, 0xb5, 0x16, 0x13, 0x35, 0x34, 0x64, 0xb2, 0xa1, 0x52, 0x10, 0x8e, 0x66, 0x16, 0x9c, 0x08, 0x60, 0x01, 0x99, 0x40, 0xcb,
  0xc0, 0x9d, 0xbc, 0x39, 0x40, 0x7e, 0x27, 0x9d, 0x8c, 0xec, 0x56, 0xc7, 0xfb, 0x92, 0x28, 0xbd, 0x3a, 0xaa, 0x70, 0xc9, 0x85,
  0x4f, 0x31, 0x1e, 0x8a, 0x24, 0x10, 0xaf, 0xf9, 0x22, 0x5e, 0xca, 0x11, 0x58, 0x66, 0xf8, 0xc2, 0xd6, 0x36, 0x4d, 0xca, 0xfa,
  0x32, 0x9e, 0x4a, 0x84, 0x4e, 0xbd, 0x05, 0x30, 0x38, 0xc0, 0x59, 0x9a, 0x2b, 0xca, 0x06, 0xf1, 0xea, 0x65, 0xa9, 0x30, 0x49,
  0xcf, 0x4e, 0xbf, 0xd0, 0xa1, 0x73, 0xc4, 0x64, 0x48, 0x8c, 0xf1, 0x4b, 0x7b, 0xb0, 0xd7, 0xf5, 0xf5, 0xf5, 0xa3, 0xb9, 0x17,
  0x16, 0x2d, 0x85, 0xf4, 0xbe, 0x90, 0x01, 0x32, 0x95, 0x91, 0xaf, 0xc9, 0xff, 0x70, 0x6d, 0x8e, 0x90, 0x40, 0xf0, 0x9e, 0x4a,
  0x40, 0x1a, 0x9f, 0xdd, 0xe6, 0xd3, 0x69, 0xae, 0x35, 0x70, 0xcf, 0x33, 0x73, 0x75, 0xa0, 0xe0, 0x54, 0x2f, 0xc1, 0xe2, 0xa8,
  0x68, 0x19, 0xdc, 0x20, 0xd9, 0x86, 0x46, 0x09, 0xa4, 0xec, 0x11, 0x43, 0x2a, 0x3b, 0x43, 0xb6, 0x15, 0xd9, 0x78, 0x06, 0x58,
  0x4c, 0xed, 0xa4, 0x68, 0x84, 0x2c, 0x37, 0xe2, 0x8f, 0x63, 0xec, 0x6d, 0xfb, 0x7b, 0xbc, 0x97, 0xec, 0x84, 0xf3, 0x8d, 0xd2,
  0x3a, 0xfb, 0xe5, 0x36, 0xf9, 0x0b, 0x96, 0x54, 0x7e, 0x90, 0xc4, 0xde, 0x49, 0xcc, 0x19, 0x2b, 0xbf, 0x86, 0x62, 0x87, 0x93,
  0x2d, 0x92, 0x01, 0x31, 0x1c, 0x29, 0x5b, 0x57, 0xf1, 0xff, 0xe6, 0x14, 0x1d, 0xf2, 0x29, 0x4d, 0x00, 0xa4, 0x50, 0xd6, 0xf8,
  0x2e, 0xde, 0x5f, 0xb5, 0x4b, 0xc9, 0x29, 0xf2, 0x57, 0x4c, 0xfe, 0x6b, 0x2c, 0xa6, 0x12, 0x1e, 0xed, 0x29, 0x0e, 0xcd, 0xc4,
  0xb3, 0xeb, 0x52, 0x33, 0x8f, 0x69, 0x6d, 0x12, 0x37, 0x43, 0xc6, 0x4d, 0xfb, 0xe3, 0xd3, 0xbe, 0xd9, 0xfc, 0x1d, 0xc4, 0xc7,
  0xa7, 0xfe, 0x98, 0xd1, 0x5b, 0xda, 0x20, 0xf9, 0x19, 0x1b, 0xe0, 0x9d, 0x41, 0x43, 0xe7, 0x4f, 0xae, 0x28, 0x3f, 0x4d, 0xb9,
  0x75, 0x7d, 0x44, 0x8b, 0x5d, 0x27, 0x53, 0x3b, 0x15, 0x5f, 0xd0, 0xae, 0xbe, 0xdd, 0xf5, 0x6a, 0x21, 0xf4, 0xfa, 0xc3, 0x8c,
  0x2f, 0xb7, 0xae, 0x1d, 0xd5, 0x82, 0xcf, 0x49, 0x88, 0x37, 0x1e, 0x21, 0x36, 0x8f, 0xcd, 0xd7, 0xb0, 0xfd, 0xec, 0x54, 0x0c,
  0x5f, 0xb6, 0x7c, 0x49, 0x67, 0xab, 0x28, 0x81, 0xc3, 0x36, 0x01, 0x7e, 0x28, 0x15, 0xf1, 0x30, 0xa8, 0x2f, 0x8b, 0x1e, 0xe6,
  0x5a, 0x86, 0x3a, 0xbb, 0x3f, 0xd3, 0xf8, 0xda, 0x2f, 0x96, 0x9f, 0x50, 0x8b, 0x10, 0x60, 0x4d, 0x5e, 0x65, 0x2b, 0x31, 0xf9,
  0xcb, 0x5d, 0x91, 0x1a, 0xd1, 0x13, 0xe7, 0xd2, 0x99, 0x65, 0xc3, 0xd5, 0x12, 0xdf, 0x9a, 0xe7, 0x14, 0x00, 0x28, 0x9b, 0x9b,
  0x47, 0x2d, 0x3b, 0x35, 0xaf, 0x07, 0xd3, 0x06, 0x16, 0xc5, 0xd6, 0x16, 0xf9, 0x93, 0x22, 0x2e, 0x7b, 0x91, 0xff, 0x66, 0xd9,
  0x7e, 0xf5, 0xb7, 0x7a, 0x2f, 0x92, 0x55, 0xd4, 0xbd, 0x21, 0x54, 0x0b, 0x23, 0xef, 0x5b, 0x74, 0xa2, 0x3d, 0xb7, 0x8b, 0x4c,
  0x7f, 0x2d, 0x7e, 0xf3, 0x60, 0x0e, 0x54, 0x91, 0xab, 0xca, 0x76, 0xc6, 0xd7, 0xad, 0x68, 0x6f, 0x3b, 0x71, 0xb0, 0xf7, 0x23,
  0x0b, 0xda, 0x25, 0x58, 0x79, 0x81, 0x1b, 0x99, 0x56, 0xe2, 0xdc, 0x41, 0xed, 0xca, 0xec, 0x37, 0x2d, 0x35, 0xf7, 0xaf, 0x0b,
  0xaa, 0xdf, 0x81, 0x08, 0xf0, 0x35, 0x3b, 0x02, 0x7f, 0xd8, 0xfd, 0x72, 0xaa, 0x14, 0xa3, 0xaf, 0x7b, 0xc0, 0xb3, 0xc9, 0x4f,
  0xc2, 0x65, 0xe2, 0x87, 0xf8, 0x80, 0xc9, 0x8b, 0xfa, 0xcb, 0x19, 0xfa, 0xce, 0x5f, 0x2a, 0x48, 0xa6, 0x95, 0x8c, 0xe0, 0x07,
  0x0d, 0x7a, 0x8f, 0xcd, 0x34, 0x40, 0x26, 0x8a, 0xd7, 0x3d, 0xc1, 0x37, 0x3d, 0x0b, 0x1f, 0x1a, 0x4c, 0xfa, 0x84, 0xfa, 0x41,
  0xb9, 0x25, 0x46, 0xc5, 0x44, 0xef, 0xa8, 0x3a, 0xa2, 0xba, 0x60, 0xc7, 0x5e, 0xca, 0xd6, 0xdc, 0xde, 0xa7, 0xee, 0x45, 0x90,
  0x97, 0xde, 0xa5, 0x34, 0xa1, 0x7a, 0x15, 0x2a, 0x1a, 0xf9, 0x72, 0x86, 0x91, 0xd1, 0x19, 0xc6, 0x43, 0x30, 0x09, 0xca, 0x60,
  0x5a, 0xc2, 0x1e, 0x22, 0xf1, 0xca, 0x57, 0xb0, 0x28, 0xa4, 0x12, 0x3e, 0xcf, 0x04, 0x61, 0x2e, 0x3f, 0x1b, 0x60, 0x1d, 0x96,
  0x99, 0xf6, 0xb2, 0x16, 0xf7, 0x97, 0x29, 0x98, 0xf4
};

static std::array<uint8_t, dataSize> dataBuffer;

static void reset_test()
{
  using namespace Chimera::Hardware;
  using namespace Chimera::SPI;
  using namespace Chimera::GPIO;
  
  static bool driverAllocated = false;

  if ( !driverAllocated )
  {
    spi = std::make_shared<Chimera::SPI::SPIClass>();
  }

  memset( &setup, 0, sizeof( Chimera::SPI::Setup ) );

  /*------------------------------------------------
  This should be the first group of four pins on CN7  
  for the STM32F4 Nucleo dev board.
  ------------------------------------------------*/
  setup.MOSI.port      = Port::PORTC;
  setup.MOSI.pin       = 12;
  setup.MOSI.alternate = GPIO_AF6_SPI3;

  setup.MISO.port      = Port::PORTC;
  setup.MISO.pin       = 11;
  setup.MISO.alternate = GPIO_AF6_SPI3;

  setup.SCK.port      = Port::PORTC;
  setup.SCK.pin       = 10;
  setup.SCK.alternate = GPIO_AF6_SPI3;

  setup.CS.port = Port::PORTD;
  setup.CS.pin  = 2;

  setup.channel = 3;
  setup.clockFrequency = 8000000;
}

TEST_GROUP( FRAM_OperationalTests ){};

TEST( FRAM_OperationalTests, initialization )
{
  reset_test();

  auto result = fram.attachSPI( spi );
  CHECK_EQUAL( Chimera::CommonStatusCodes::OK, result );

  result = fram.initialize( &setup, Chimera::Hardware::SubPeripheralMode::BLOCKING );
  CHECK_EQUAL( Chimera::CommonStatusCodes::OK, result );
}

TEST( FRAM_OperationalTests, readId )
{
  reset_test();
  fram.attachSPI( spi );
  fram.initialize( &setup, Chimera::Hardware::SubPeripheralMode::BLOCKING );

  uint32_t foundID = fram.readID();
  CHECK_EQUAL( FRAM::Fujitsu::MB85RS64V_DEVID, foundID );
}

TEST( FRAM_OperationalTests, readStatusRegister )
{
  reset_test();
  fram.attachSPI( spi );
  fram.initialize( &setup, Chimera::Hardware::SubPeripheralMode::BLOCKING );

  uint8_t sr = fram.readStatus();
  CHECK( sr != 0xFF );
}

TEST( FRAM_OperationalTests, writeEnable )
{
  using namespace FRAM::Fujitsu;
  
  reset_test();
  fram.attachSPI( spi );
  fram.initialize( &setup, Chimera::Hardware::SubPeripheralMode::BLOCKING );
  
  fram.writeDisable();
  CHECK_FALSE( ( fram.readStatus() & MB85RS64V_SR_BIT_WEL ) );

  auto result = fram.writeEnable();
  CHECK_EQUAL( result, Chimera::CommonStatusCodes::OK );
  CHECK( ( fram.readStatus() & MB85RS64V_SR_BIT_WEL ) );
}

TEST( FRAM_OperationalTests, writeDisable )
{
  using namespace FRAM::Fujitsu;
  
  reset_test();
  fram.attachSPI( spi );
  fram.initialize( &setup, Chimera::Hardware::SubPeripheralMode::BLOCKING );
  
  fram.writeEnable();
  CHECK( ( fram.readStatus() & MB85RS64V_SR_BIT_WEL ) );

  auto result = fram.writeDisable();
  CHECK_EQUAL( result, Chimera::CommonStatusCodes::OK );
  CHECK_FALSE( ( fram.readStatus() & MB85RS64V_SR_BIT_WEL ) );
}

TEST( FRAM_OperationalTests, writeStatusRegister )
{
  using namespace FRAM::Fujitsu;
  
  reset_test();
  fram.attachSPI( spi );
  fram.initialize( &setup, Chimera::Hardware::SubPeripheralMode::BLOCKING );

  /* Datasheet says only bits 7, 3, and 2 can be set */
  static constexpr uint8_t fully_set_val = ( 1u << 7 ) | ( 1u << 3 ) | ( 1u << 2 );

  /*------------------------------------------------
  First clear the status register
  ------------------------------------------------*/
  fram.writeEnable();
  auto result = fram.writeStatusRegister( 0 );
  CHECK_EQUAL( Chimera::CommonStatusCodes::OK, result );
  CHECK_EQUAL( 0u, fram.readStatus() );

  /*------------------------------------------------
  Now try to write the status register when the write
  enable bit is cleared.
  ------------------------------------------------*/
  fram.writeDisable();
  result = fram.writeStatusRegister( fully_set_val );
  CHECK_EQUAL( Chimera::CommonStatusCodes::OK, result );
  CHECK( fully_set_val != fram.readStatus() );
  
  /*------------------------------------------------
  Try again, but this time enable writing
  ------------------------------------------------*/
  fram.writeEnable();
  result = fram.writeStatusRegister( fully_set_val );
  CHECK_EQUAL( Chimera::CommonStatusCodes::OK, result );
  CHECK_EQUAL( fully_set_val, fram.readStatus() );
  
  /*------------------------------------------------
  Try (and fail) to clear the status register
  ------------------------------------------------*/
  fram.writeDisable();
  result = fram.writeStatusRegister( 0u );
  CHECK_EQUAL( Chimera::CommonStatusCodes::OK, result );
  CHECK_EQUAL( fully_set_val, fram.readStatus() );
  
  /*------------------------------------------------
  Put the chip back to the default state
  ------------------------------------------------*/
  fram.writeEnable();
  result = fram.writeStatusRegister( 0 );
  CHECK_EQUAL( Chimera::CommonStatusCodes::OK, result );
  CHECK_EQUAL( 0u, fram.readStatus() );
  fram.writeDisable();
}

TEST( FRAM_OperationalTests, readWriteData_normal )
{
  using namespace FRAM::Fujitsu;

  size_t address = 0x0000;
  auto result    = Chimera::CommonStatusCodes::FAIL;

  reset_test();
  fram.attachSPI( spi );
  fram.initialize( &setup, Chimera::Hardware::SubPeripheralMode::BLOCKING );

  dataBuffer.fill( 0 );

  /*------------------------------------------------
  Try to read/write in a variety of locations
  ------------------------------------------------*/
  for ( int x = 0; x < 10; x++ )
  {
    result = fram.write( address, randomData.data(), randomData.size() );
    CHECK_EQUAL( Chimera::CommonStatusCodes::OK, result );

    result = fram.read( address, dataBuffer.data(), dataBuffer.size() );
    CHECK_EQUAL( Chimera::CommonStatusCodes::OK, result );
    CHECK( memcmp( randomData.data(), dataBuffer.data(), dataBuffer.size() ) == 0 );

    address += 0x010;
    CHECK( (address + randomData.size()) < MB85RS64V_Descriptor.endAddress );
  }
}